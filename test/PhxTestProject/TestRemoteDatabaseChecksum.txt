using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;

namespace ConsoleApplication2
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(TestSQLConnection("CMP_DB","khphoenixsql2"));
            Console.WriteLine(TestSQLConnection("CMP_DB", "khphoenixsql5"));
            Console.WriteLine(TestSQLConnection("JoeDB", "khphoenixsql2"));
            Console.WriteLine(TestRemoteSQLConnection("CMP_DB", "khphoenixsql2"));
            Console.WriteLine(TestRemoteSQLConnection("CMP_DB", "khphoenixsql5"));
            Console.WriteLine(TestRemoteSQLConnection("JoeDB", "khphoenixsql2"));
            Console.WriteLine(TestRemoteDatabaseChecksum("CMP_DB","khphoenixsql2",14,10));
            Console.WriteLine(TestRemoteDatabaseChecksum("CMP_DB", "khphoenixsql2", 5, 10));
            Console.WriteLine(TestRemoteDatabaseChecksum("CMP_DB", "khphoenixsql2", 14, 6));
            Console.WriteLine(TestRemoteDatabaseChecksum("CMP_DB", "khphoenixsql2", 5, 6));
            Console.WriteLine(TestRemoteDatabaseChecksum("JoeDB", "khphoenixsql2", 5, 6));
            Console.WriteLine(TestRemoteDatabaseChecksum("JoeDB", "khphoenixsql5", 5, 6));
            Console.ReadKey();
        }

        // This function returns a boolean indicating if the SQL can be connected to or not
        public static bool TestSQLConnection(string databaseName, string serverName)
        {
            // get list of Windows services
            bool dbConnection;
            try
            {
                SqlConnection testConnection = new SqlConnection("database=" + databaseName + ";server=" + serverName + ";Integrated Security=SSPI;");
                testConnection.Open();
                testConnection.Close();
                dbConnection = true;
            }
            catch {
                dbConnection = false;
            }
            return dbConnection;
        }

        public static string TestRemoteSQLConnection(string databaseName, string serverName)
        {
            string output = "";
            try
            {
                SqlConnection testConnection = new SqlConnection("database=" + databaseName + ";server=" + serverName + ";Integrated Security=SSPI;");
                testConnection.Open();
                testConnection.Close();
                output += "SQL Connect Test: PASS; Server: " +serverName+ "; Database: " +databaseName;
            }
            catch (Exception ex)
            {
                output += "SQL Connect Test: FAILED; Server: " +serverName+ "; Database: " +databaseName+ "; " + ex.Message;
            }
            return output;
        }

        public static string TestRemoteDatabaseChecksum(string databaseName, string serverName, int tableCount, int procedureCount)
        {
            string output = "Server=" + serverName + "; DB=" + databaseName + "; ";

            try {
                SqlConnection dbConnection = new SqlConnection("database=" + databaseName + ";server=" + serverName + ";Integrated Security=SSPI;");
                dbConnection.Open();


                output += "SQL Connection: PASSED; ";

                string dbTableQuery = "SELECT COUNT(TABLE_NAME) FROM [" + databaseName + "].INFORMATION_SCHEMA.Tables";

                SqlDataAdapter dbTableDataAdapter = new SqlDataAdapter(dbTableQuery, dbConnection);

                DataTable dbTableDataTable = new DataTable();
                
                dbTableDataAdapter.Fill(dbTableDataTable);

                DataTableReader dbTableReader = dbTableDataTable.CreateDataReader();

                while (dbTableReader.Read()) {
                    for (int i = 0; i < dbTableReader.FieldCount; i++)
                    {
                        int readTableCount = Convert.ToInt32(dbTableReader[i].ToString());
                        if (readTableCount == tableCount)
                        {
                            output += "Table Checksum: OK";
                        }
                        else
                        {
                            output += "Table Checksum: FAILED";
                        }
                        output += " (" + readTableCount + " out of " + tableCount + ");";
                    }
                }

                string dbProcedureQuery = "select COUNT(ROUTINE_NAME) from ["+databaseName+"].information_schema.routines where routine_type = 'PROCEDURE'";

                SqlDataAdapter dbProcedureDataAdapter = new SqlDataAdapter(dbProcedureQuery, dbConnection);

                DataTable dbProcedureDataTable = new DataTable();

                dbProcedureDataAdapter.Fill(dbProcedureDataTable);

                DataTableReader dbProcedureReader = dbProcedureDataTable.CreateDataReader();

                while (dbProcedureReader.Read())
                {
                    for (int j = 0; j < dbProcedureReader.FieldCount; j++)
                    {
                        int readProcedureCount = Convert.ToInt32(dbProcedureReader[j].ToString());
                        if (readProcedureCount == procedureCount)
                        {
                            output += " Procedure Checksum: OK";
                        }
                        else
                        {
                            output += " Procedure Checksum: FAILED";
                        }
                        output += " (" + readProcedureCount + " out of " + procedureCount + ");";
                    }

                }

                dbConnection.Close();
            }
            catch (Exception ex) {
                output += "SQL Connection: FAILED; " + ex.Message;
            }

            return output;

        }

    }
}
